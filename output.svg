<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (11,544,380 samples, 0.04%)</title><rect x="212.6" y="261" width="0.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="215.64" y="271.5" ></text>
</g>
<g >
<title>diskv::DiskManager::UnpinPage (174,047,233 samples, 0.55%)</title><rect x="486.6" y="373" width="6.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="489.55" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;diskv::Page*&gt;::construct&lt;diskv::Page*, diskv::Page*&amp;&gt; (5,576,904 samples, 0.02%)</title><rect x="489.5" y="325" width="0.2" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="492.51" y="335.5" ></text>
</g>
<g >
<title>[unknown] (4,552,300 samples, 0.01%)</title><rect x="364.1" y="101" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="367.08" y="111.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_Tuple_impl (21,635,467 samples, 0.07%)</title><rect x="1049.1" y="277" width="0.8" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="1052.13" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (3,566,682 samples, 0.01%)</title><rect x="1018.2" y="341" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1021.21" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (895,999,486 samples, 2.83%)</title><rect x="1104.4" y="421" width="33.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1107.40" y="431.5" >_i..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,348,179 samples, 0.06%)</title><rect x="1000.7" y="309" width="0.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1003.71" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::_M_node_allocator (8,228,777 samples, 0.03%)</title><rect x="1050.7" y="341" width="0.3" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1053.74" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (505,132,315 samples, 1.60%)</title><rect x="1019.9" y="309" width="18.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1022.90" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::empty (44,284,515 samples, 0.14%)</title><rect x="182.0" y="341" width="1.6" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="184.95" y="351.5" ></text>
</g>
<g >
<title>__libc_start_main (28,783,372,423 samples, 90.98%)</title><rect x="30.7" y="421" width="1073.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="33.66" y="431.5" >__libc_start_main</text>
</g>
<g >
<title>[unknown] (7,169,026 samples, 0.02%)</title><rect x="1030.6" y="165" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1033.56" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (6,014,202 samples, 0.02%)</title><rect x="1013.7" y="293" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1016.71" y="303.5" ></text>
</g>
<g >
<title>[unknown] (23,964,196 samples, 0.08%)</title><rect x="1029.9" y="261" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1032.94" y="271.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::param_type::a (397,589,382 samples, 1.26%)</title><rect x="949.7" y="357" width="14.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="952.67" y="367.5" ></text>
</g>
<g >
<title>[unknown] (2,619,261,670 samples, 8.28%)</title><rect x="71.1" y="357" width="97.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="74.12" y="367.5" >[unknown]</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (25,253,799 samples, 0.08%)</title><rect x="1030.8" y="293" width="1.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1033.83" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (308,131,953 samples, 0.97%)</title><rect x="990.0" y="341" width="11.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="993.02" y="351.5" ></text>
</g>
<g >
<title>[unknown] (53,497,060 samples, 0.17%)</title><rect x="10.6" y="325" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.62" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (15,607,975 samples, 0.05%)</title><rect x="1040.7" y="309" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1043.70" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;::_Hash_node_value_base (7,247,540 samples, 0.02%)</title><rect x="1043.6" y="325" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1046.64" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::end (12,272,655 samples, 0.04%)</title><rect x="491.9" y="309" width="0.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="494.92" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (16,485,222 samples, 0.05%)</title><rect x="1016.6" y="293" width="0.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1019.57" y="303.5" ></text>
</g>
<g >
<title>murmur3::rotl64 (4,461,113 samples, 0.01%)</title><rect x="533.3" y="181" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="536.31" y="191.5" ></text>
</g>
<g >
<title>[unknown] (117,982,015 samples, 0.37%)</title><rect x="1133.4" y="293" width="4.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1136.42" y="303.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (39,473,553 samples, 0.12%)</title><rect x="1100.1" y="325" width="1.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1103.09" y="335.5" ></text>
</g>
<g >
<title>[unknown] (36,321,480 samples, 0.11%)</title><rect x="1072.6" y="165" width="1.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1075.57" y="175.5" ></text>
</g>
<g >
<title>[unknown] (1,980,280,614 samples, 6.26%)</title><rect x="95.0" y="197" width="73.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="97.95" y="207.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (65,003,349 samples, 0.21%)</title><rect x="1071.5" y="261" width="2.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1074.50" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::deallocate (4,701,594 samples, 0.01%)</title><rect x="1066.5" y="293" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1069.47" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; const&amp;&gt; (6,695,395 samples, 0.02%)</title><rect x="525.6" y="261" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="528.64" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::pop_back (4,486,153 samples, 0.01%)</title><rect x="485.8" y="357" width="0.2" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="488.85" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, false, true&gt;::_Node_iterator (4,845,813 samples, 0.02%)</title><rect x="1039.1" y="325" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1042.06" y="335.5" ></text>
</g>
<g >
<title>diskv::GetHighBit (3,393,057 samples, 0.01%)</title><rect x="493.0" y="373" width="0.2" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="496.05" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::~_Vector_base (3,371,548 samples, 0.01%)</title><rect x="540.7" y="357" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="543.65" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (21,598,813 samples, 0.07%)</title><rect x="1002.2" y="325" width="0.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1005.21" y="335.5" ></text>
</g>
<g >
<title>[unknown] (18,935,807 samples, 0.06%)</title><rect x="477.0" y="85" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="479.98" y="95.5" ></text>
</g>
<g >
<title>[unknown] (2,825,739,663 samples, 8.93%)</title><rect x="372.3" y="293" width="105.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="375.29" y="303.5" >[unknown]</text>
</g>
<g >
<title>std::__addressof&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; (4,460,291 samples, 0.01%)</title><rect x="527.4" y="213" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="530.40" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (20,077,643 samples, 0.06%)</title><rect x="1016.5" y="309" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1019.48" y="319.5" ></text>
</g>
<g >
<title>[unknown] (31,574,369 samples, 0.10%)</title><rect x="1072.8" y="149" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1075.75" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (7,180,675 samples, 0.02%)</title><rect x="1089.9" y="389" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1092.95" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (117,676,619 samples, 0.37%)</title><rect x="1069.8" y="325" width="4.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1072.81" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page**, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::__normal_iterator (6,672,409 samples, 0.02%)</title><rect x="491.7" y="293" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="494.67" y="303.5" ></text>
</g>
<g >
<title>_int_free (111,947,340 samples, 0.35%)</title><rect x="13.2" y="405" width="4.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="16.20" y="415.5" ></text>
</g>
<g >
<title>[diskv_hashtable_benchmark] (3,647,963 samples, 0.01%)</title><rect x="1013.2" y="341" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1016.18" y="351.5" ></text>
</g>
<g >
<title>diskv::Hash (203,588,251 samples, 0.64%)</title><rect x="189.7" y="373" width="7.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="192.70" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::end (7,836,809 samples, 0.02%)</title><rect x="482.7" y="325" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="485.68" y="335.5" ></text>
</g>
<g >
<title>[unknown] (271,362,177 samples, 0.86%)</title><rect x="230.5" y="325" width="10.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="233.50" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::end (3,542,469 samples, 0.01%)</title><rect x="183.6" y="341" width="0.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="186.60" y="351.5" ></text>
</g>
<g >
<title>std::__find_if&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, __gnu_cxx::__ops::_Iter_pred&lt;diskv::HashTableBucketPage::RemoveAndSave (71,381,871 samples, 0.23%)</title><rect x="531.9" y="325" width="2.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="534.85" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::__normal_iterator (5,893,560 samples, 0.02%)</title><rect x="1075.4" y="309" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1078.44" y="319.5" ></text>
</g>
<g >
<title>all (31,636,953,880 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;::_M_ptr (7,083,058 samples, 0.02%)</title><rect x="1064.0" y="277" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1067.03" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (19,156,363 samples, 0.06%)</title><rect x="1017.4" y="309" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1020.41" y="319.5" ></text>
</g>
<g >
<title>[unknown] (4,787,441 samples, 0.02%)</title><rect x="1177.9" y="341" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1180.89" y="351.5" ></text>
</g>
<g >
<title>[unknown] (1,976,706,630 samples, 6.25%)</title><rect x="404.0" y="213" width="73.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="406.96" y="223.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (89,791,969 samples, 0.28%)</title><rect x="66.5" y="309" width="3.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="69.48" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;::_M_valptr (4,747,490 samples, 0.02%)</title><rect x="1043.9" y="325" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1046.91" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::end (6,009,580 samples, 0.02%)</title><rect x="187.8" y="309" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="190.81" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::_S_relocate (4,466,232 samples, 0.01%)</title><rect x="534.2" y="229" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="537.18" y="239.5" ></text>
</g>
<g >
<title>[unknown] (238,602,342 samples, 0.75%)</title><rect x="1128.9" y="341" width="8.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1131.92" y="351.5" ></text>
</g>
<g >
<title>diskv::HashTableBucketPage::SetValueAt (3,397,590 samples, 0.01%)</title><rect x="541.2" y="389" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="544.22" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::deallocate (5,583,296 samples, 0.02%)</title><rect x="525.3" y="245" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="528.31" y="255.5" ></text>
</g>
<g >
<title>[unknown] (5,986,923 samples, 0.02%)</title><rect x="1030.6" y="149" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1033.61" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::max_size (11,231,070 samples, 0.04%)</title><rect x="526.3" y="245" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="529.31" y="255.5" ></text>
</g>
<g >
<title>[unknown] (4,648,686 samples, 0.01%)</title><rect x="212.9" y="213" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="215.90" y="223.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;*&gt;::pointer_to (8,199,622 samples, 0.03%)</title><rect x="1065.9" y="277" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1068.90" y="287.5" ></text>
</g>
<g >
<title>[unknown] (2,224,660,981 samples, 7.03%)</title><rect x="85.8" y="229" width="83.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="88.84" y="239.5" >[unknown]</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::allocate (6,694,904 samples, 0.02%)</title><rect x="525.0" y="245" width="0.2" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="527.98" y="255.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (187,789,525 samples, 0.59%)</title><rect x="515.0" y="277" width="7.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="518.02" y="287.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt; (70,385,593 samples, 0.22%)</title><rect x="527.6" y="213" width="2.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="530.56" y="223.5" ></text>
</g>
<g >
<title>[unknown] (3,419,313 samples, 0.01%)</title><rect x="30.5" y="309" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="33.54" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (13,213,038 samples, 0.04%)</title><rect x="1002.3" y="309" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1005.35" y="319.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, false&gt;::_M_head (4,802,218 samples, 0.02%)</title><rect x="1049.5" y="261" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1052.53" y="271.5" ></text>
</g>
<g >
<title>[unknown] (5,974,924 samples, 0.02%)</title><rect x="1177.8" y="373" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1180.84" y="383.5" ></text>
</g>
<g >
<title>diskv::HashTableBucketPage::SetValueAt (40,597,974 samples, 0.13%)</title><rect x="535.8" y="373" width="1.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="538.84" y="383.5" ></text>
</g>
<g >
<title>[unknown] (4,650,409 samples, 0.01%)</title><rect x="1101.8" y="117" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.82" y="127.5" ></text>
</g>
<g >
<title>[unknown] (3,164,663,680 samples, 10.00%)</title><rect x="246.2" y="325" width="118.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="249.21" y="335.5" >[unknown]</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (3,629,146 samples, 0.01%)</title><rect x="1076.2" y="341" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1079.24" y="351.5" ></text>
</g>
<g >
<title>diskv::Hash (206,498,965 samples, 0.65%)</title><rect x="493.2" y="373" width="7.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="496.17" y="383.5" ></text>
</g>
<g >
<title>diskv::Page::GetData (16,724,735 samples, 0.05%)</title><rect x="184.1" y="357" width="0.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="187.05" y="367.5" ></text>
</g>
<g >
<title>[diskv_hashtable_benchmark] (5,713,134 samples, 0.02%)</title><rect x="30.7" y="405" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="33.66" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page* const*, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::__normal_iterator (5,578,908 samples, 0.02%)</title><rect x="483.2" y="325" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="486.23" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::_M_node_allocator (5,816,508 samples, 0.02%)</title><rect x="1066.2" y="293" width="0.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1069.21" y="303.5" ></text>
</g>
<g >
<title>_int_free (3,349,531 samples, 0.01%)</title><rect x="525.3" y="229" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="528.31" y="239.5" ></text>
</g>
<g >
<title>[unknown] (3,419,313 samples, 0.01%)</title><rect x="30.5" y="357" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="33.54" y="367.5" ></text>
</g>
<g >
<title>_int_free (9,417,399 samples, 0.03%)</title><rect x="1067.0" y="261" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1069.95" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (6,645,961 samples, 0.02%)</title><rect x="512.0" y="341" width="0.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="515.02" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (23,983,700 samples, 0.08%)</title><rect x="1013.5" y="325" width="0.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1016.49" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::size (5,589,352 samples, 0.02%)</title><rect x="526.7" y="245" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="529.73" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::end (17,830,288 samples, 0.06%)</title><rect x="484.1" y="325" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="487.10" y="335.5" ></text>
</g>
<g >
<title>std::forward&lt;diskv::Page*&amp;&gt; (4,800,511 samples, 0.02%)</title><rect x="186.9" y="309" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="189.92" y="319.5" ></text>
</g>
<g >
<title>diskv::HashTablePage::GetSize (14,459,643 samples, 0.05%)</title><rect x="211.7" y="373" width="0.5" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="214.70" y="383.5" ></text>
</g>
<g >
<title>[unknown] (11,141,125 samples, 0.04%)</title><rect x="477.3" y="69" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="480.27" y="79.5" ></text>
</g>
<g >
<title>_init (4,573,505 samples, 0.01%)</title><rect x="1104.2" y="421" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1107.23" y="431.5" ></text>
</g>
<g >
<title>murmur3::MurmurHash3_x64_128 (192,778,515 samples, 0.61%)</title><rect x="189.7" y="357" width="7.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="192.70" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (326,782,085 samples, 1.03%)</title><rect x="1077.8" y="389" width="12.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1080.76" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (6,008,700 samples, 0.02%)</title><rect x="1050.1" y="309" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1053.12" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair (6,015,311 samples, 0.02%)</title><rect x="1074.0" y="309" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1076.97" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_fill_n&lt;true&gt;::__uninit_fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (11,544,380 samples, 0.04%)</title><rect x="212.6" y="293" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="215.64" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt;::construct&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; (22,326,236 samples, 0.07%)</title><rect x="529.1" y="165" width="0.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="532.06" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;diskv::HashTableBucketPage::RemoveAndSave (498,278,398 samples, 1.57%)</title><rect x="513.2" y="325" width="18.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="516.19" y="335.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::param_type::b (194,506,836 samples, 0.61%)</title><rect x="942.4" y="341" width="7.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="945.41" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (3,585,818 samples, 0.01%)</title><rect x="1069.5" y="341" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1072.50" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (4,812,205 samples, 0.02%)</title><rect x="1013.9" y="309" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1016.94" y="319.5" ></text>
</g>
<g >
<title>[unknown] (2,289,064,511 samples, 7.24%)</title><rect x="83.4" y="245" width="85.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="86.44" y="255.5" >[unknown]</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;diskv::Page*&gt;::construct&lt;diskv::Page*, diskv::Page*&amp;&gt; (16,731,745 samples, 0.05%)</title><rect x="490.0" y="309" width="0.6" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="493.01" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;::_M_addr (3,567,212 samples, 0.01%)</title><rect x="1051.4" y="309" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1054.35" y="319.5" ></text>
</g>
<g >
<title>[unknown] (4,786,807 samples, 0.02%)</title><rect x="12.8" y="325" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.75" y="335.5" ></text>
</g>
<g >
<title>[unknown] (228,385,327 samples, 0.72%)</title><rect x="61.3" y="357" width="8.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="64.31" y="367.5" ></text>
</g>
<g >
<title>[unknown] (246,936,978 samples, 0.78%)</title><rect x="1128.6" y="373" width="9.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1131.61" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::back (32,303,528 samples, 0.10%)</title><rect x="180.7" y="341" width="1.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="183.75" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (7,171,369 samples, 0.02%)</title><rect x="1019.6" y="309" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1022.63" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;::_M_next (184,475,043 samples, 0.58%)</title><rect x="1031.8" y="293" width="6.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1034.82" y="303.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (23,833,220 samples, 0.08%)</title><rect x="1048.0" y="277" width="0.9" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1051.02" y="287.5" ></text>
</g>
<g >
<title>operator delete (3,616,650 samples, 0.01%)</title><rect x="1076.4" y="389" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1079.38" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (8,136,311 samples, 0.03%)</title><rect x="1101.3" y="309" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1104.25" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (15,588,180 samples, 0.05%)</title><rect x="19.8" y="405" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="22.75" y="415.5" ></text>
</g>
<g >
<title>__libc_lseek64 (266,722,036 samples, 0.84%)</title><rect x="59.9" y="373" width="9.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="62.88" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::emplace_back&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; const&amp;&gt; (254,624,774 samples, 0.80%)</title><rect x="522.1" y="293" width="9.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="525.11" y="303.5" ></text>
</g>
<g >
<title>std::remove_if&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, diskv::HashTableBucketPage::RemoveAndSave (608,676,045 samples, 1.92%)</title><rect x="512.5" y="357" width="22.7" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="515.52" y="367.5" >s..</text>
</g>
<g >
<title>malloc (54,618,457 samples, 0.17%)</title><rect x="1137.8" y="421" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1140.82" y="431.5" ></text>
</g>
<g >
<title>[unknown] (589,835,801 samples, 1.86%)</title><rect x="455.7" y="181" width="22.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="458.69" y="191.5" >[..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~_Vector_base (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="373" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1104.60" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;diskv::HashTableBucketPage::RemoveAndSave (70,267,777 samples, 0.22%)</title><rect x="531.9" y="293" width="2.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="534.90" y="303.5" ></text>
</g>
<g >
<title>[unknown] (65,003,349 samples, 0.21%)</title><rect x="1071.5" y="277" width="2.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1074.50" y="287.5" ></text>
</g>
<g >
<title>[unknown] (248,132,592 samples, 0.78%)</title><rect x="1128.6" y="389" width="9.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1131.57" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::push_back (214,228,215 samples, 0.68%)</title><rect x="1068.4" y="373" width="8.0" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1071.39" y="383.5" ></text>
</g>
<g >
<title>[unknown] (5,668,440 samples, 0.02%)</title><rect x="364.0" y="117" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="367.04" y="127.5" ></text>
</g>
<g >
<title>[unknown] (4,648,686 samples, 0.01%)</title><rect x="212.9" y="181" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="215.90" y="191.5" ></text>
</g>
<g >
<title>diskv::Page::ResetMemory (3,347,761 samples, 0.01%)</title><rect x="485.6" y="357" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="488.60" y="367.5" ></text>
</g>
<g >
<title>[unknown] (5,974,924 samples, 0.02%)</title><rect x="1177.8" y="389" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1180.84" y="399.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, false&gt;::_Head_base (16,762,547 samples, 0.05%)</title><rect x="1052.5" y="309" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1055.51" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::_M_deallocate_node (129,733,451 samples, 0.41%)</title><rect x="1063.4" y="309" width="4.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1066.37" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::_S_do_relocate (4,466,232 samples, 0.01%)</title><rect x="534.2" y="213" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="537.18" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page* const*, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::__normal_iterator (8,917,295 samples, 0.03%)</title><rect x="484.4" y="309" width="0.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="487.43" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (16,745,021 samples, 0.05%)</title><rect x="10.0" y="405" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (396,167,260 samples, 1.25%)</title><rect x="1053.6" y="325" width="14.7" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1056.57" y="335.5" ></text>
</g>
<g >
<title>[unknown] (2,900,513,371 samples, 9.17%)</title><rect x="369.5" y="341" width="108.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="372.50" y="351.5" >[unknown]</text>
</g>
<g >
<title>[diskv_hashtable_benchmark] (10,080,634 samples, 0.03%)</title><rect x="216.3" y="373" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="219.34" y="383.5" ></text>
</g>
<g >
<title>diskv::HashTableBucketPage::ValueAt (22,874,565 samples, 0.07%)</title><rect x="210.8" y="373" width="0.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="213.81" y="383.5" ></text>
</g>
<g >
<title>[unknown] (2,526,317,363 samples, 7.99%)</title><rect x="74.6" y="309" width="94.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="77.59" y="319.5" >[unknown]</text>
</g>
<g >
<title>std::fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (11,544,380 samples, 0.04%)</title><rect x="212.6" y="277" width="0.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="215.64" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (303,274,960 samples, 0.96%)</title><rect x="990.2" y="325" width="11.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="993.16" y="335.5" ></text>
</g>
<g >
<title>[unknown] (3,569,741 samples, 0.01%)</title><rect x="12.8" y="293" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.80" y="303.5" ></text>
</g>
<g >
<title>diskv::DiskManager::ReleasePage (121,644,330 samples, 0.38%)</title><rect x="488.0" y="357" width="4.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="490.97" y="367.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access (5,573,077 samples, 0.02%)</title><rect x="521.7" y="229" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="524.69" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::emplace_back&lt;diskv::Page*&amp;&gt; (107,135,730 samples, 0.34%)</title><rect x="488.5" y="341" width="4.0" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="491.51" y="351.5" ></text>
</g>
<g >
<title>[unknown] (3,279,797,466 samples, 10.37%)</title><rect x="241.9" y="357" width="122.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="244.92" y="367.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="261" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.60" y="271.5" ></text>
</g>
<g >
<title>diskv::DiskManager::FetchPage (221,074,196 samples, 0.70%)</title><rect x="477.8" y="373" width="8.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="480.77" y="383.5" ></text>
</g>
<g >
<title>diskv::HashTable::RawIndexOf (295,494,119 samples, 0.93%)</title><rect x="501.4" y="373" width="11.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="504.38" y="383.5" ></text>
</g>
<g >
<title>[unknown] (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="165" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.60" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt;::destroy&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; (3,351,570 samples, 0.01%)</title><rect x="528.5" y="181" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="531.52" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt; &gt;::operator- (3,347,908 samples, 0.01%)</title><rect x="531.0" y="261" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="534.02" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt;, true&gt;::_S_get (3,511,377 samples, 0.01%)</title><rect x="1064.9" y="277" width="0.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1067.87" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::deallocate (24,273,169 samples, 0.08%)</title><rect x="1065.0" y="277" width="0.9" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1068.00" y="287.5" ></text>
</g>
<g >
<title>[unknown] (3,419,313 samples, 0.01%)</title><rect x="30.5" y="325" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="33.54" y="335.5" ></text>
</g>
<g >
<title>[unknown] (11,228,078 samples, 0.04%)</title><rect x="363.8" y="149" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="366.83" y="159.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_Tuple_impl (20,330,881 samples, 0.06%)</title><rect x="1052.4" y="325" width="0.7" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="1055.37" y="335.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (46,427,108 samples, 0.15%)</title><rect x="1099.9" y="341" width="1.7" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1102.87" y="351.5" ></text>
</g>
<g >
<title>diskv::DiskManager::UnpinPage (82,923,912 samples, 0.26%)</title><rect x="185.0" y="373" width="3.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="188.03" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7,211,562 samples, 0.02%)</title><rect x="12.9" y="405" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="15.93" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::__normal_iterator (5,950,627 samples, 0.02%)</title><rect x="1076.0" y="309" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1079.02" y="319.5" ></text>
</g>
<g >
<title>[unknown] (3,472,077 samples, 0.01%)</title><rect x="212.9" y="133" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="215.94" y="143.5" ></text>
</g>
<g >
<title>[unknown] (8,108,749 samples, 0.03%)</title><rect x="212.8" y="245" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="215.77" y="255.5" ></text>
</g>
<g >
<title>diskv::HashTableDirectoryRegion::GetBucketLocalDepth (18,958,014 samples, 0.06%)</title><rect x="537.4" y="373" width="0.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="540.36" y="383.5" ></text>
</g>
<g >
<title>std::__find_if&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, __gnu_cxx::__ops::_Iter_pred&lt;diskv::HashTableBucketPage::RemoveAndSave (70,267,777 samples, 0.22%)</title><rect x="531.9" y="309" width="2.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="534.90" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (506,348,876 samples, 1.60%)</title><rect x="1019.9" y="325" width="18.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1022.90" y="335.5" ></text>
</g>
<g >
<title>diskv::DiskManager::AcquirePage (103,011,987 samples, 0.33%)</title><rect x="180.2" y="357" width="3.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="183.21" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::back (4,462,982 samples, 0.01%)</title><rect x="534.4" y="245" width="0.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="537.35" y="255.5" ></text>
</g>
<g >
<title>[unknown] (103,881,221 samples, 0.33%)</title><rect x="473.8" y="133" width="3.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="476.81" y="143.5" ></text>
</g>
<g >
<title>[unknown] (2,299,914,848 samples, 7.27%)</title><rect x="391.9" y="245" width="85.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="394.90" y="255.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (4,573,505 samples, 0.01%)</title><rect x="1104.2" y="405" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1107.23" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt; &gt; (3,344,190 samples, 0.01%)</title><rect x="524.7" y="261" width="0.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="527.69" y="271.5" ></text>
</g>
<g >
<title>diskv::HashTable::RawIndexOf (326,182,972 samples, 1.03%)</title><rect x="197.5" y="373" width="12.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="200.47" y="383.5" ></text>
</g>
<g >
<title>[unknown] (7,183,415 samples, 0.02%)</title><rect x="12.7" y="357" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.67" y="367.5" ></text>
</g>
<g >
<title>[unknown] (107,679,783 samples, 0.34%)</title><rect x="65.8" y="325" width="4.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="68.81" y="335.5" ></text>
</g>
<g >
<title>diskv::HashTablePage::GetSize (10,474,020 samples, 0.03%)</title><rect x="541.3" y="389" width="0.4" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="544.35" y="399.5" ></text>
</g>
<g >
<title>[unknown] (237,844,989 samples, 0.75%)</title><rect x="231.8" y="309" width="8.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="234.75" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; (3,491,296 samples, 0.01%)</title><rect x="1063.8" y="293" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1066.77" y="303.5" ></text>
</g>
<g >
<title>[unknown] (53,497,060 samples, 0.17%)</title><rect x="10.6" y="277" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.62" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::pop_back (7,809,868 samples, 0.02%)</title><rect x="484.8" y="341" width="0.3" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="487.85" y="351.5" ></text>
</g>
<g >
<title>[unknown] (45,306,760 samples, 0.14%)</title><rect x="1136.1" y="245" width="1.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1139.13" y="255.5" ></text>
</g>
<g >
<title>murmur3::rotl64 (17,943,732 samples, 0.06%)</title><rect x="520.2" y="213" width="0.7" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="523.19" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,091,468,325 samples, 3.45%)</title><rect x="1012.4" y="357" width="40.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1015.42" y="367.5" >std..</text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (35,900,724 samples, 0.11%)</title><rect x="1047.6" y="293" width="1.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1050.57" y="303.5" ></text>
</g>
<g >
<title>sysmalloc (10,781,122 samples, 0.03%)</title><rect x="1177.7" y="421" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1180.67" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (7,236,429 samples, 0.02%)</title><rect x="570.5" y="373" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="573.50" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::size (3,347,417 samples, 0.01%)</title><rect x="530.4" y="261" width="0.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="533.40" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page**, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::operator- (11,184,194 samples, 0.04%)</title><rect x="482.3" y="325" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="485.27" y="335.5" ></text>
</g>
<g >
<title>[unknown] (53,497,060 samples, 0.17%)</title><rect x="10.6" y="309" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.62" y="319.5" ></text>
</g>
<g >
<title>[unknown] (156,181,145 samples, 0.49%)</title><rect x="234.8" y="293" width="5.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="237.80" y="303.5" ></text>
</g>
<g >
<title>__brk (8,394,612 samples, 0.03%)</title><rect x="12.6" y="405" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="15.62" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (7,205,702 samples, 0.02%)</title><rect x="1014.1" y="309" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1017.12" y="319.5" ></text>
</g>
<g >
<title>[unknown] (182,667,239 samples, 0.58%)</title><rect x="162.0" y="181" width="6.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="165.00" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; const&amp;&gt; (17,878,362 samples, 0.06%)</title><rect x="533.7" y="245" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="536.68" y="255.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (9,210,159 samples, 0.03%)</title><rect x="1100.9" y="309" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1103.87" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;diskv::Page*&gt; &gt;::construct&lt;diskv::Page*, diskv::Page*&amp;&gt; (30,114,108 samples, 0.10%)</title><rect x="489.7" y="325" width="1.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="492.72" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (399,609,078 samples, 1.26%)</title><rect x="1053.4" y="341" width="14.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1056.44" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (8,338,231 samples, 0.03%)</title><rect x="571.9" y="373" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="574.93" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::back (44,068,017 samples, 0.14%)</title><rect x="1074.6" y="341" width="1.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1077.60" y="351.5" ></text>
</g>
<g >
<title>[unknown] (2,952,421,573 samples, 9.33%)</title><rect x="254.1" y="261" width="110.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="257.13" y="271.5" >[unknown]</text>
</g>
<g >
<title>unlink_chunk.isra.0 (319,800,998 samples, 1.01%)</title><rect x="1178.1" y="421" width="11.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1181.07" y="431.5" ></text>
</g>
<g >
<title>[unknown] (167,346,666 samples, 0.53%)</title><rect x="358.0" y="165" width="6.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="361.01" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (8,265,660 samples, 0.03%)</title><rect x="1157.4" y="405" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1160.42" y="415.5" ></text>
</g>
<g >
<title>operator new (4,836,961 samples, 0.02%)</title><rect x="1046.4" y="309" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1049.36" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (83,788,524 samples, 0.26%)</title><rect x="1046.9" y="309" width="3.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1049.85" y="319.5" ></text>
</g>
<g >
<title>__libc_read (3,314,552,463 samples, 10.48%)</title><rect x="240.6" y="373" width="123.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="243.62" y="383.5" >__libc_read</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::~vector (4,485,582 samples, 0.01%)</title><rect x="540.6" y="373" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="543.61" y="383.5" ></text>
</g>
<g >
<title>[unknown] (3,419,313 samples, 0.01%)</title><rect x="30.5" y="293" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="33.54" y="303.5" ></text>
</g>
<g >
<title>[unknown] (3,584,266 samples, 0.01%)</title><rect x="1030.7" y="101" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1033.70" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (229,455,051 samples, 0.73%)</title><rect x="1003.2" y="341" width="8.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1006.20" y="351.5" ></text>
</g>
<g >
<title>[unknown] (8,133,902 samples, 0.03%)</title><rect x="1101.7" y="149" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.69" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; (37,216,199 samples, 0.12%)</title><rect x="1066.8" y="277" width="1.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1069.82" y="287.5" ></text>
</g>
<g >
<title>diskv::DiskManager::AcquirePage (103,764,359 samples, 0.33%)</title><rect x="481.3" y="357" width="3.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="484.27" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (3,641,938 samples, 0.01%)</title><rect x="1000.6" y="309" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1003.58" y="319.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt; (4,466,232 samples, 0.01%)</title><rect x="534.2" y="197" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="537.18" y="207.5" ></text>
</g>
<g >
<title>[diskv_hashtable_benchmark] (382,302,728 samples, 1.21%)</title><rect x="37.4" y="389" width="14.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="40.39" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (7,170,629 samples, 0.02%)</title><rect x="1017.5" y="293" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1020.54" y="303.5" ></text>
</g>
<g >
<title>operator new (16,844,450 samples, 0.05%)</title><rect x="17.6" y="405" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="20.60" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::emplace_back&lt;diskv::Page*&amp;&gt; (64,770,962 samples, 0.20%)</title><rect x="185.6" y="341" width="2.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="188.62" y="351.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::operator (9,290,386,359 samples, 29.37%)</title><rect x="603.2" y="357" width="346.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="606.15" y="367.5" >std::uniform_int_distribution&lt;int&gt;::operator</text>
</g>
<g >
<title>[unknown] (4,648,686 samples, 0.01%)</title><rect x="212.9" y="197" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="215.90" y="207.5" ></text>
</g>
<g >
<title>diskv::DiskManager::UnpinPage (8,322,935 samples, 0.03%)</title><rect x="53.0" y="389" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="56.00" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::_M_check_len (25,742,500 samples, 0.08%)</title><rect x="526.0" y="261" width="0.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="528.98" y="271.5" ></text>
</g>
<g >
<title>[unknown] (3,062,980,867 samples, 9.68%)</title><rect x="250.0" y="277" width="114.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="253.01" y="287.5" >[unknown]</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (95,382,651 samples, 0.30%)</title><rect x="1014.7" y="341" width="3.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1017.65" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_fill_initialize (11,544,380 samples, 0.04%)</title><rect x="212.6" y="341" width="0.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="215.64" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (23,964,196 samples, 0.08%)</title><rect x="1029.9" y="277" width="0.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1032.94" y="287.5" ></text>
</g>
<g >
<title>diskv::DiskManager::ReleasePage (74,458,064 samples, 0.24%)</title><rect x="185.3" y="357" width="2.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="188.26" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::end (8,434,084 samples, 0.03%)</title><rect x="181.6" y="325" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="184.64" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; (3,353,838 samples, 0.01%)</title><rect x="530.0" y="197" width="0.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="532.98" y="207.5" ></text>
</g>
<g >
<title>[unknown] (2,539,372,573 samples, 8.03%)</title><rect x="74.1" y="325" width="94.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="77.10" y="335.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (4,770,944 samples, 0.02%)</title><rect x="1030.7" y="117" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1033.65" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;::_M_ptr (3,604,052 samples, 0.01%)</title><rect x="1042.8" y="325" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1045.84" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (3,596,455 samples, 0.01%)</title><rect x="1019.7" y="293" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1022.68" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;::_Hash_node (4,760,101 samples, 0.02%)</title><rect x="1041.5" y="341" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1044.51" y="351.5" ></text>
</g>
<g >
<title>[unknown] (53,497,060 samples, 0.17%)</title><rect x="10.6" y="357" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.62" y="367.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (5,853,470,560 samples, 18.50%)</title><rect x="708.9" y="341" width="218.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="711.95" y="351.5" >std::mersenne_twister_engine..</text>
</g>
<g >
<title>[unknown] (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="309" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.60" y="319.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (4,844,967 samples, 0.02%)</title><rect x="1090.4" y="389" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1093.40" y="399.5" ></text>
</g>
<g >
<title>[unknown] (52,330,828 samples, 0.17%)</title><rect x="10.7" y="261" width="1.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.67" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (56,986,011 samples, 0.18%)</title><rect x="479.1" y="357" width="2.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="482.10" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt; &gt;::__normal_iterator (4,460,692 samples, 0.01%)</title><rect x="531.4" y="261" width="0.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="534.44" y="271.5" ></text>
</g>
<g >
<title>[unknown] (12,834,393 samples, 0.04%)</title><rect x="12.1" y="165" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.14" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (95,954,740 samples, 0.30%)</title><rect x="1070.3" y="309" width="3.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1073.35" y="319.5" ></text>
</g>
<g >
<title>std::make_pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (27,573,781 samples, 0.09%)</title><rect x="570.9" y="373" width="1.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="573.90" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (4,810,434 samples, 0.02%)</title><rect x="571.1" y="357" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="574.08" y="367.5" ></text>
</g>
<g >
<title>[unknown] (1,528,712,513 samples, 4.83%)</title><rect x="420.7" y="197" width="57.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="423.67" y="207.5" >[unkno..</text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;diskv::Page* const*, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt; (6,664,414 samples, 0.02%)</title><rect x="483.5" y="325" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="486.52" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (21,643,648 samples, 0.07%)</title><rect x="18.2" y="405" width="0.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="21.23" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~vector (59,197,646 samples, 0.19%)</title><rect x="1099.8" y="389" width="2.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1102.78" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt;, true&gt;::_S_get (3,510,769 samples, 0.01%)</title><rect x="1066.3" y="277" width="0.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1069.29" y="287.5" ></text>
</g>
<g >
<title>log2@@GLIBC_2.29 (10,125,622 samples, 0.03%)</title><rect x="539.4" y="373" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="542.40" y="383.5" ></text>
</g>
<g >
<title>diskv::Hash (35,648,289 samples, 0.11%)</title><rect x="532.2" y="213" width="1.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="535.23" y="223.5" ></text>
</g>
<g >
<title>[unknown] (4,648,686 samples, 0.01%)</title><rect x="212.9" y="229" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="215.90" y="239.5" ></text>
</g>
<g >
<title>[unknown] (29,747,345 samples, 0.09%)</title><rect x="68.7" y="277" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="71.72" y="287.5" ></text>
</g>
<g >
<title>[unknown] (2,486,630,981 samples, 7.86%)</title><rect x="76.1" y="293" width="92.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="79.07" y="303.5" >[unknown]</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;::_Hash_node_value_base (3,594,198 samples, 0.01%)</title><rect x="1043.5" y="309" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1046.50" y="319.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;diskv::HashTable::Insert (14,583,170 samples, 0.05%)</title><rect x="521.5" y="261" width="0.5" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="524.48" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt; &gt;::__normal_iterator (3,346,017 samples, 0.01%)</title><rect x="530.9" y="261" width="0.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="533.90" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::end (7,162,611 samples, 0.02%)</title><rect x="183.3" y="325" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="186.34" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (7,176,264 samples, 0.02%)</title><rect x="1039.6" y="341" width="0.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1042.59" y="351.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (276,969,188 samples, 0.88%)</title><rect x="20.3" y="405" width="10.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="23.33" y="415.5" ></text>
</g>
<g >
<title>murmur3::rotl64 (11,161,634 samples, 0.04%)</title><rect x="500.5" y="357" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="503.46" y="367.5" ></text>
</g>
<g >
<title>[unknown] (320,738,268 samples, 1.01%)</title><rect x="1125.9" y="405" width="11.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1128.86" y="415.5" ></text>
</g>
<g >
<title>[unknown] (512,604,650 samples, 1.62%)</title><rect x="221.5" y="357" width="19.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="224.50" y="367.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt; (81,521,136 samples, 0.26%)</title><rect x="527.2" y="229" width="3.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="530.23" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (19,270,664 samples, 0.06%)</title><rect x="19.0" y="405" width="0.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="22.03" y="415.5" ></text>
</g>
<g >
<title>diskv::HashTableBucketPage::KeyAt (9,673,618 samples, 0.03%)</title><rect x="540.8" y="389" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="543.82" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (30,946,115 samples, 0.10%)</title><rect x="1018.7" y="325" width="1.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1021.75" y="335.5" ></text>
</g>
<g >
<title>[unknown] (2,079,637,632 samples, 6.57%)</title><rect x="91.2" y="213" width="77.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="94.25" y="223.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (8,166,109 samples, 0.03%)</title><rect x="12.3" y="149" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.32" y="159.5" ></text>
</g>
<g >
<title>diskv::HashTable::GetValue (4,255,387,822 samples, 13.45%)</title><rect x="53.9" y="389" width="158.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="56.92" y="399.5" >diskv::HashTable::Ge..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; (31,264,423 samples, 0.10%)</title><rect x="528.7" y="181" width="1.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="531.73" y="191.5" ></text>
</g>
<g >
<title>[unknown] (4,786,807 samples, 0.02%)</title><rect x="12.8" y="309" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.75" y="319.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple&lt;void, true&gt; (26,358,117 samples, 0.08%)</title><rect x="1052.1" y="341" width="1.0" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1055.15" y="351.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;::count (1,227,690,476 samples, 3.88%)</title><rect x="966.2" y="373" width="45.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="969.23" y="383.5" >std:..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (17,314,703 samples, 0.05%)</title><rect x="1067.3" y="261" width="0.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1070.30" y="271.5" ></text>
</g>
<g >
<title>[unknown] (3,146,754,774 samples, 9.95%)</title><rect x="246.9" y="309" width="117.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="249.88" y="319.5" >[unknown]</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::_S_do_relocate (90,463,942 samples, 0.29%)</title><rect x="527.0" y="245" width="3.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="530.02" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_deallocate (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="357" width="0.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1104.60" y="367.5" ></text>
</g>
<g >
<title>[unknown] (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="277" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.60" y="287.5" ></text>
</g>
<g >
<title>diskv::HashTableDirectoryRegion::GetBucketLocalDepth (274,240,973 samples, 0.87%)</title><rect x="502.0" y="357" width="10.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="505.04" y="367.5" ></text>
</g>
<g >
<title>diskv::GenericComparator&lt;32ul&gt;::operator (8,457,652 samples, 0.03%)</title><rect x="53.3" y="389" width="0.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="56.31" y="399.5" ></text>
</g>
<g >
<title>[unknown] (8,352,071 samples, 0.03%)</title><rect x="1177.8" y="405" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1180.76" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::deallocate (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="341" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1104.60" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; const&amp;&gt; (183,204,666 samples, 0.58%)</title><rect x="523.7" y="277" width="6.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="526.69" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (5,861,271 samples, 0.02%)</title><rect x="1076.5" y="389" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1079.51" y="399.5" ></text>
</g>
<g >
<title>[unknown] (2,153,609,017 samples, 6.81%)</title><rect x="397.4" y="229" width="80.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="400.36" y="239.5" >[unknown]</text>
</g>
<g >
<title>generate_random_data[abi:cxx11] (14,330,815,693 samples, 45.30%)</title><rect x="541.9" y="389" width="534.5" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="544.86" y="399.5" >generate_random_data[abi:cxx11]</text>
</g>
<g >
<title>malloc_consolidate (470,747,097 samples, 1.49%)</title><rect x="1139.9" y="421" width="17.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1142.86" y="431.5" ></text>
</g>
<g >
<title>murmur3::MurmurHash3_x64_128 (138,581,757 samples, 0.44%)</title><rect x="515.7" y="229" width="5.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="518.69" y="239.5" ></text>
</g>
<g >
<title>[unknown] (320,170,035 samples, 1.01%)</title><rect x="352.3" y="181" width="11.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="355.31" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::end (3,342,186 samples, 0.01%)</title><rect x="492.4" y="325" width="0.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="495.38" y="335.5" ></text>
</g>
<g >
<title>[unknown] (126,739,333 samples, 0.40%)</title><rect x="65.1" y="341" width="4.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="68.10" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page**, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::operator* (3,589,700 samples, 0.01%)</title><rect x="180.5" y="341" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="183.52" y="351.5" ></text>
</g>
<g >
<title>[unknown] (3,472,077 samples, 0.01%)</title><rect x="212.9" y="117" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="215.94" y="127.5" ></text>
</g>
<g >
<title>[unknown] (4,787,441 samples, 0.02%)</title><rect x="1177.9" y="309" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1180.89" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;diskv::Page*&gt; &gt;::destroy&lt;diskv::Page*&gt; (3,366,500 samples, 0.01%)</title><rect x="481.6" y="341" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="484.56" y="351.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;::~unordered_map (401,849,083 samples, 1.27%)</title><rect x="1053.4" y="373" width="14.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1056.35" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;::_M_valptr (7,155,309 samples, 0.02%)</title><rect x="1051.3" y="325" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1054.26" y="335.5" ></text>
</g>
<g >
<title>[unknown] (3,435,346 samples, 0.01%)</title><rect x="364.1" y="37" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="367.12" y="47.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (31,114,672 samples, 0.10%)</title><rect x="1013.4" y="341" width="1.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1016.36" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (3,594,033 samples, 0.01%)</title><rect x="1018.0" y="277" width="0.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1020.99" y="287.5" ></text>
</g>
<g >
<title>diskv::Hash (3,347,811 samples, 0.01%)</title><rect x="515.3" y="261" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="518.31" y="271.5" ></text>
</g>
<g >
<title>std::_Any_data::_M_access&lt;diskv::HashTable::Insert (5,573,077 samples, 0.02%)</title><rect x="521.7" y="245" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="524.69" y="255.5" ></text>
</g>
<g >
<title>murmur3::rotl64 (29,024,415 samples, 0.09%)</title><rect x="499.4" y="341" width="1.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="502.38" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::emplace_back&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; const&amp;&gt; (24,575,143 samples, 0.08%)</title><rect x="533.6" y="261" width="0.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="536.60" y="271.5" ></text>
</g>
<g >
<title>__libc_write (3,041,343,376 samples, 9.61%)</title><rect x="364.2" y="373" width="113.5" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="367.25" y="383.5" >__libc_write</text>
</g>
<g >
<title>std::_Hash_impl::hash (4,864,530 samples, 0.02%)</title><rect x="1040.1" y="325" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1043.08" y="335.5" ></text>
</g>
<g >
<title>[unknown] (13,127,251 samples, 0.04%)</title><rect x="1030.3" y="197" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1033.34" y="207.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::param_type::b (46,403,523 samples, 0.15%)</title><rect x="964.5" y="357" width="1.7" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="967.50" y="367.5" ></text>
</g>
<g >
<title>[unknown] (3,419,313 samples, 0.01%)</title><rect x="30.5" y="341" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="33.54" y="351.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (37,904,995 samples, 0.12%)</title><rect x="532.2" y="245" width="1.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="535.19" y="255.5" ></text>
</g>
<g >
<title>diskv::HashTableBucketPage::KeyAt (31,373,447 samples, 0.10%)</title><rect x="209.6" y="373" width="1.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="212.64" y="383.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::operator (10,563,248,570 samples, 33.39%)</title><rect x="572.2" y="373" width="394.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="575.24" y="383.5" >std::uniform_int_distribution&lt;int&gt;::operator</text>
</g>
<g >
<title>diskv::HashTable::IndexOf (10,061,162 samples, 0.03%)</title><rect x="501.0" y="373" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="504.00" y="383.5" ></text>
</g>
<g >
<title>[unknown] (153,714,836 samples, 0.49%)</title><rect x="1132.1" y="309" width="5.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1135.09" y="319.5" ></text>
</g>
<g >
<title>[unknown] (2,348,963,083 samples, 7.42%)</title><rect x="81.2" y="261" width="87.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="84.20" y="271.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (95,546,023 samples, 0.30%)</title><rect x="165.3" y="165" width="3.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="168.25" y="175.5" ></text>
</g>
<g >
<title>[unknown] (43,518,530 samples, 0.14%)</title><rect x="1072.3" y="197" width="1.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1075.30" y="207.5" ></text>
</g>
<g >
<title>[unknown] (64,741,132 samples, 0.20%)</title><rect x="475.3" y="117" width="2.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="478.27" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::begin (8,933,344 samples, 0.03%)</title><rect x="483.8" y="325" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="486.77" y="335.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, false&gt;::_Head_base (6,002,841 samples, 0.02%)</title><rect x="1049.3" y="261" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1052.31" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page**, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::operator- (18,956,041 samples, 0.06%)</title><rect x="491.2" y="309" width="0.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="494.22" y="319.5" ></text>
</g>
<g >
<title>[unknown] (2,982,174,851 samples, 9.43%)</title><rect x="366.5" y="357" width="111.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="369.46" y="367.5" >[unknown]</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (4,784,959 samples, 0.02%)</title><rect x="1000.4" y="309" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1003.40" y="319.5" ></text>
</g>
<g >
<title>[unknown] (26,669,118 samples, 0.08%)</title><rect x="11.6" y="213" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.63" y="223.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::operator (218,226,040 samples, 0.69%)</title><rect x="1090.7" y="389" width="8.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1093.71" y="399.5" ></text>
</g>
<g >
<title>[unknown] (4,552,300 samples, 0.01%)</title><rect x="364.1" y="69" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="367.08" y="79.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;diskv::Page*&gt; &gt;::destroy&lt;diskv::Page*&gt; (4,460,497 samples, 0.01%)</title><rect x="485.0" y="325" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="487.97" y="335.5" ></text>
</g>
<g >
<title>std::addressof&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; (5,823,813 samples, 0.02%)</title><rect x="1066.0" y="261" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1068.99" y="271.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::param_type::a (405,927,399 samples, 1.28%)</title><rect x="927.3" y="341" width="15.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="930.27" y="351.5" ></text>
</g>
<g >
<title>[unknown] (66,943,733 samples, 0.21%)</title><rect x="238.1" y="277" width="2.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="241.13" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;::_M_next (3,463,380 samples, 0.01%)</title><rect x="1011.8" y="357" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1014.85" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple (28,718,631 samples, 0.09%)</title><rect x="1048.9" y="293" width="1.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1051.91" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;::_M_valptr (10,695,853 samples, 0.03%)</title><rect x="1063.9" y="293" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1066.90" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (8,365,593 samples, 0.03%)</title><rect x="1013.6" y="309" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1016.63" y="319.5" ></text>
</g>
<g >
<title>[unknown] (53,497,060 samples, 0.17%)</title><rect x="10.6" y="293" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.62" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_fill_n_a&lt;unsigned long*, unsigned long, unsigned long, unsigned long&gt; (11,544,380 samples, 0.04%)</title><rect x="212.6" y="325" width="0.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="215.64" y="335.5" ></text>
</g>
<g >
<title>[unknown] (15,559,062 samples, 0.05%)</title><rect x="1030.3" y="229" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1033.25" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;::_Hash_node (11,848,882 samples, 0.04%)</title><rect x="1043.2" y="325" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1046.20" y="335.5" ></text>
</g>
<g >
<title>diskv::HashTable::GetBucketNum (3,368,405 samples, 0.01%)</title><rect x="500.9" y="373" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="503.87" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::back (25,172,383 samples, 0.08%)</title><rect x="187.1" y="325" width="0.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="190.10" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (44,365,886 samples, 0.14%)</title><rect x="1039.9" y="341" width="1.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1042.85" y="351.5" ></text>
</g>
<g >
<title>[unknown] (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="181" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.60" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (132,015,782 samples, 0.42%)</title><rect x="1069.6" y="341" width="5.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1072.63" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (211,624,578 samples, 0.67%)</title><rect x="1003.5" y="325" width="7.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1006.46" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::_M_deallocate (7,815,941 samples, 0.02%)</title><rect x="525.2" y="261" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="528.23" y="271.5" ></text>
</g>
<g >
<title>[diskv_hashtable_benchmark] (10,881,824 samples, 0.03%)</title><rect x="59.5" y="373" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="62.47" y="383.5" ></text>
</g>
<g >
<title>diskv::HashTablePage::GetSize (16,731,262 samples, 0.05%)</title><rect x="538.1" y="373" width="0.7" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="541.15" y="383.5" ></text>
</g>
<g >
<title>[unknown] (60,177,933 samples, 0.19%)</title><rect x="1071.7" y="229" width="2.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1074.68" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt;::construct&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; const&amp;&gt; (3,345,984 samples, 0.01%)</title><rect x="525.8" y="245" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="528.77" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator[] (27,598,285 samples, 0.09%)</title><rect x="1076.7" y="389" width="1.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1079.73" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (23,964,196 samples, 0.08%)</title><rect x="1029.9" y="293" width="0.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1032.94" y="303.5" ></text>
</g>
<g >
<title>diskv::HashTableBucketPage::RemoveAndSave (69,167,570 samples, 0.22%)</title><rect x="531.9" y="277" width="2.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="534.94" y="287.5" ></text>
</g>
<g >
<title>murmur3::rotl64 (10,809,736 samples, 0.03%)</title><rect x="196.9" y="357" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="199.89" y="367.5" ></text>
</g>
<g >
<title>diskv::Page::GetData (14,505,708 samples, 0.05%)</title><rect x="492.5" y="357" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="495.50" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (3,471,764 samples, 0.01%)</title><rect x="1104.1" y="405" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1107.10" y="415.5" ></text>
</g>
<g >
<title>[unknown] (4,770,944 samples, 0.02%)</title><rect x="1030.7" y="133" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1033.65" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::operator- (19,014,951 samples, 0.06%)</title><rect x="1075.0" y="325" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1077.95" y="335.5" ></text>
</g>
<g >
<title>[unknown] (16,741,890 samples, 0.05%)</title><rect x="1030.2" y="245" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1033.21" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::end (6,693,266 samples, 0.02%)</title><rect x="531.4" y="277" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="534.36" y="287.5" ></text>
</g>
<g >
<title>murmur3::rotl64 (33,415,012 samples, 0.11%)</title><rect x="195.6" y="341" width="1.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="198.64" y="351.5" ></text>
</g>
<g >
<title>diskv::HashTable::HashTable (11,544,380 samples, 0.04%)</title><rect x="212.6" y="389" width="0.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="215.64" y="399.5" ></text>
</g>
<g >
<title>[unknown] (2,634,479,309 samples, 8.33%)</title><rect x="266.0" y="213" width="98.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="268.99" y="223.5" >[unknown]</text>
</g>
<g >
<title>diskv::HashTablePage::SetSize (3,340,462 samples, 0.01%)</title><rect x="538.8" y="373" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="541.77" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_begin (599,979,772 samples, 1.90%)</title><rect x="967.6" y="341" width="22.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="970.65" y="351.5" >s..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_Tuple_impl (4,654,571 samples, 0.01%)</title><rect x="1039.4" y="341" width="0.1" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="1042.37" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt;::construct&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; const&amp;&gt; (8,941,745 samples, 0.03%)</title><rect x="523.1" y="261" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="526.15" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;::_M_next (256,866,856 samples, 0.81%)</title><rect x="1053.8" y="309" width="9.6" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1056.79" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; const&amp;&gt; (13,376,054 samples, 0.04%)</title><rect x="523.1" y="277" width="0.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="526.06" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt;, true&gt;::_S_get (22,784,310 samples, 0.07%)</title><rect x="1044.3" y="309" width="0.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1047.31" y="319.5" ></text>
</g>
<g >
<title>[unknown] (4,552,300 samples, 0.01%)</title><rect x="364.1" y="85" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="367.08" y="95.5" ></text>
</g>
<g >
<title>[unknown] (3,107,620,196 samples, 9.82%)</title><rect x="248.3" y="293" width="115.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="251.34" y="303.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (3,419,313 samples, 0.01%)</title><rect x="30.5" y="389" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="33.54" y="399.5" ></text>
</g>
<g >
<title>diskv::HashTable::Insert (35,648,289 samples, 0.11%)</title><rect x="532.2" y="229" width="1.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="535.23" y="239.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (13,076,031 samples, 0.04%)</title><rect x="1048.4" y="261" width="0.5" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1051.42" y="271.5" ></text>
</g>
<g >
<title>[unknown] (2,870,332,239 samples, 9.07%)</title><rect x="370.6" y="309" width="107.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="373.63" y="319.5" >[unknown]</text>
</g>
<g >
<title>malloc (3,621,104 samples, 0.01%)</title><rect x="1046.2" y="309" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1049.22" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::empty (46,823,815 samples, 0.15%)</title><rect x="483.0" y="341" width="1.8" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="486.02" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (11,544,380 samples, 0.04%)</title><rect x="212.6" y="357" width="0.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="215.64" y="367.5" ></text>
</g>
<g >
<title>[unknown] (20,367,422 samples, 0.06%)</title><rect x="1073.2" y="133" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1076.17" y="143.5" ></text>
</g>
<g >
<title>[unknown] (62,569,816 samples, 0.20%)</title><rect x="1071.6" y="245" width="2.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1074.59" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page**, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::__normal_iterator (3,605,386 samples, 0.01%)</title><rect x="180.9" y="325" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="183.93" y="335.5" ></text>
</g>
<g >
<title>[unknown] (2,546,517,240 samples, 8.05%)</title><rect x="73.8" y="341" width="95.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="76.83" y="351.5" >[unknown]</text>
</g>
<g >
<title>__munmap (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="325" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1104.60" y="335.5" ></text>
</g>
<g >
<title>[unknown] (53,497,060 samples, 0.17%)</title><rect x="10.6" y="405" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.62" y="415.5" ></text>
</g>
<g >
<title>diskv::DiskManager::FetchPage (216,818,189 samples, 0.69%)</title><rect x="176.9" y="373" width="8.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="179.90" y="383.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (61,183,317 samples, 0.19%)</title><rect x="177.8" y="357" width="2.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="180.84" y="367.5" ></text>
</g>
<g >
<title>diskv::HashTable::IndexOf (4,734,022 samples, 0.01%)</title><rect x="197.3" y="373" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="200.29" y="383.5" ></text>
</g>
<g >
<title>diskv::Hash (4,525,493 samples, 0.01%)</title><rect x="53.7" y="389" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="56.67" y="399.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (5,909,151 samples, 0.02%)</title><rect x="1048.2" y="261" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1051.16" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::_M_node_allocator (28,759,467 samples, 0.09%)</title><rect x="1044.1" y="325" width="1.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1047.09" y="335.5" ></text>
</g>
<g >
<title>diskv::DiskManager::FetchPage (7,896,597 samples, 0.02%)</title><rect x="52.7" y="389" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="55.71" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;::operator= (15,620,956 samples, 0.05%)</title><rect x="534.6" y="325" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="537.56" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (15,852,856 samples, 0.05%)</title><rect x="1099.1" y="389" width="0.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1102.15" y="399.5" ></text>
</g>
<g >
<title>[unknown] (17,337,193 samples, 0.05%)</title><rect x="12.0" y="181" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.97" y="191.5" ></text>
</g>
<g >
<title>std::__addressof&lt;diskv::HashTable::Insert (3,388,625 samples, 0.01%)</title><rect x="521.9" y="245" width="0.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="524.90" y="255.5" ></text>
</g>
<g >
<title>std::forward&lt;diskv::Page*&amp;&gt; (5,583,371 samples, 0.02%)</title><rect x="490.6" y="309" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="493.63" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::pop_back (8,433,619 samples, 0.03%)</title><rect x="183.7" y="341" width="0.4" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="186.74" y="351.5" ></text>
</g>
<g >
<title>[diskv_hashtable_benchmark] (3,452,115 samples, 0.01%)</title><rect x="1100.2" y="309" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1103.17" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3,628,214 samples, 0.01%)</title><rect x="1014.5" y="341" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1017.52" y="351.5" ></text>
</g>
<g >
<title>[unknown] (49,019,387 samples, 0.15%)</title><rect x="68.0" y="293" width="1.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="71.00" y="303.5" ></text>
</g>
<g >
<title>[unknown] (245,821,832 samples, 0.78%)</title><rect x="1128.7" y="357" width="9.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1131.65" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::_S_max_size (6,739,773 samples, 0.02%)</title><rect x="526.5" y="229" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="529.48" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (3,640,318 samples, 0.01%)</title><rect x="1043.0" y="325" width="0.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1046.02" y="335.5" ></text>
</g>
<g >
<title>diskv::DiskManager::ReleasePage (14,447,141 samples, 0.05%)</title><rect x="486.0" y="373" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="489.02" y="383.5" ></text>
</g>
<g >
<title>[unknown] (2,436,404,006 samples, 7.70%)</title><rect x="77.9" y="277" width="90.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="80.94" y="287.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (47,948,823 samples, 0.15%)</title><rect x="475.9" y="101" width="1.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="478.90" y="111.5" ></text>
</g>
<g >
<title>[unknown] (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="213" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.60" y="223.5" ></text>
</g>
<g >
<title>diskv::Page::GetData (8,416,297 samples, 0.03%)</title><rect x="212.2" y="373" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="215.24" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (35,406,755 samples, 0.11%)</title><rect x="1001.7" y="341" width="1.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1004.70" y="351.5" ></text>
</g>
<g >
<title>std::__to_address&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; (3,592,798 samples, 0.01%)</title><rect x="1051.6" y="341" width="0.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1054.62" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::_M_allocate (11,182,649 samples, 0.04%)</title><rect x="524.8" y="261" width="0.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="527.81" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page**, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::__normal_iterator (6,701,870 samples, 0.02%)</title><rect x="492.1" y="293" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="495.13" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (401,849,083 samples, 1.27%)</title><rect x="1053.4" y="357" width="14.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1056.35" y="367.5" ></text>
</g>
<g >
<title>[unknown] (5,974,924 samples, 0.02%)</title><rect x="1177.8" y="357" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1180.84" y="367.5" ></text>
</g>
<g >
<title>diskv::HashTableBucketPage::RemoveAndSave (493,816,590 samples, 1.56%)</title><rect x="513.2" y="309" width="18.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="516.23" y="319.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt; (3,345,613 samples, 0.01%)</title><rect x="530.3" y="229" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="533.27" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::allocate (28,591,372 samples, 0.09%)</title><rect x="1045.5" y="325" width="1.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1048.47" y="335.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (17,859,555 samples, 0.06%)</title><rect x="52.0" y="389" width="0.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="55.04" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (3,606,516 samples, 0.01%)</title><rect x="1090.6" y="389" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1093.58" y="399.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;*, __gnu_cxx::__ops::_Iter_pred&lt;diskv::HashTableBucketPage::RemoveAndSave (596,417,624 samples, 1.89%)</title><rect x="512.9" y="341" width="22.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="515.90" y="351.5" >s..</text>
</g>
<g >
<title>[unknown] (3,419,313 samples, 0.01%)</title><rect x="30.5" y="373" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="33.54" y="383.5" ></text>
</g>
<g >
<title>[unknown] (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="293" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.60" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (7,188,528 samples, 0.02%)</title><rect x="1031.5" y="277" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1034.50" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (11,787,571 samples, 0.04%)</title><rect x="1016.7" y="277" width="0.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1019.75" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;::_M_valptr (3,537,069 samples, 0.01%)</title><rect x="1041.7" y="341" width="0.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1044.69" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;diskv::Page*&gt;::construct&lt;diskv::Page*, diskv::Page*&amp;&gt; (8,386,583 samples, 0.03%)</title><rect x="186.6" y="309" width="0.3" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="189.61" y="319.5" ></text>
</g>
<g >
<title>[unknown] (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="197" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.60" y="207.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (21,622,998 samples, 0.07%)</title><rect x="30.9" y="405" width="0.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="33.88" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (202,268,056 samples, 0.64%)</title><rect x="1068.8" y="357" width="7.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1071.83" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::_S_relocate (92,719,666 samples, 0.29%)</title><rect x="526.9" y="261" width="3.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="529.94" y="271.5" ></text>
</g>
<g >
<title>[unknown] (53,497,060 samples, 0.17%)</title><rect x="10.6" y="341" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.62" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair (4,806,559 samples, 0.02%)</title><rect x="1074.4" y="325" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1077.38" y="335.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (48,741,008 samples, 0.15%)</title><rect x="1099.8" y="357" width="1.8" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1102.78" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (239,117,301 samples, 0.76%)</title><rect x="1041.8" y="341" width="8.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1044.82" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (3,649,664 samples, 0.01%)</title><rect x="571.3" y="357" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="574.26" y="367.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; (6,703,632 samples, 0.02%)</title><rect x="527.9" y="197" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="530.86" y="207.5" ></text>
</g>
<g >
<title>[unknown] (2,783,899,838 samples, 8.80%)</title><rect x="260.4" y="229" width="103.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="263.42" y="239.5" >[unknown]</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page**, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::operator- (14,246,584 samples, 0.05%)</title><rect x="181.1" y="325" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="184.11" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (3,567,415 samples, 0.01%)</title><rect x="1014.4" y="325" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1017.39" y="335.5" ></text>
</g>
<g >
<title>diskv::HashTableDirectoryRegion::GetBucketLocalDepth (314,192,812 samples, 0.99%)</title><rect x="197.9" y="357" width="11.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="200.92" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (4,760,321 samples, 0.02%)</title><rect x="1052.0" y="341" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1054.97" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (5,849,429 samples, 0.02%)</title><rect x="1043.3" y="309" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1046.29" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page**, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::__normal_iterator (3,549,153 samples, 0.01%)</title><rect x="181.5" y="309" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="184.51" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::operator[] (3,348,760 samples, 0.01%)</title><rect x="540.3" y="373" width="0.1" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="543.32" y="383.5" ></text>
</g>
<g >
<title>[unknown] (8,394,612 samples, 0.03%)</title><rect x="12.6" y="389" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.62" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (5,961,342 samples, 0.02%)</title><rect x="1040.3" y="325" width="0.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1043.35" y="335.5" ></text>
</g>
<g >
<title>[unknown] (79,728,509 samples, 0.25%)</title><rect x="1134.8" y="277" width="3.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1137.85" y="287.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (5,926,644 samples, 0.02%)</title><rect x="1048.7" y="245" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1051.69" y="255.5" ></text>
</g>
<g >
<title>[unknown] (34,829,920 samples, 0.11%)</title><rect x="11.3" y="245" width="1.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.32" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, false, true&gt;::operator (11,871,084 samples, 0.04%)</title><rect x="1051.1" y="341" width="0.4" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1054.09" y="351.5" ></text>
</g>
<g >
<title>operator new (8,265,660 samples, 0.03%)</title><rect x="1157.4" y="421" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1160.42" y="431.5" ></text>
</g>
<g >
<title>murmur3::MurmurHash3_x64_128 (189,733,960 samples, 0.60%)</title><rect x="493.4" y="357" width="7.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="496.38" y="367.5" ></text>
</g>
<g >
<title>diskv::Hash (154,249,262 samples, 0.49%)</title><rect x="515.6" y="245" width="5.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="518.60" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt;::allocate (8,323,387 samples, 0.03%)</title><rect x="1045.8" y="309" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1048.82" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt;, true&gt;::_S_get (8,372,040 samples, 0.03%)</title><rect x="1045.2" y="325" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1048.16" y="335.5" ></text>
</g>
<g >
<title>_int_free (3,445,117 samples, 0.01%)</title><rect x="1065.3" y="261" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1068.30" y="271.5" ></text>
</g>
<g >
<title>[unknown] (554,009,893 samples, 1.75%)</title><rect x="10.0" y="421" width="20.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_M_head (4,779,600 samples, 0.02%)</title><rect x="1049.7" y="261" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1052.71" y="271.5" ></text>
</g>
<g >
<title>[unknown] (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="229" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.60" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;diskv::HashTableBucketPage::RemoveAndSave (6,676,836 samples, 0.02%)</title><rect x="512.6" y="341" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="515.56" y="351.5" ></text>
</g>
<g >
<title>[unknown] (42,304,039 samples, 0.13%)</title><rect x="1072.4" y="181" width="1.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1075.35" y="191.5" ></text>
</g>
<g >
<title>[unknown] (218,223,437 samples, 0.69%)</title><rect x="1129.7" y="325" width="8.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1132.68" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (56,550,698 samples, 0.18%)</title><rect x="1102.0" y="405" width="2.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1104.99" y="415.5" ></text>
</g>
<g >
<title>malloc (5,898,168 samples, 0.02%)</title><rect x="17.4" y="405" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="20.38" y="415.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (8,985,924 samples, 0.03%)</title><rect x="540.0" y="373" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="542.98" y="383.5" ></text>
</g>
<g >
<title>[unknown] (7,183,415 samples, 0.02%)</title><rect x="12.7" y="373" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.67" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (5,973,473 samples, 0.02%)</title><rect x="1041.3" y="309" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1044.28" y="319.5" ></text>
</g>
<g >
<title>[unknown] (2,782,268,122 samples, 8.79%)</title><rect x="373.9" y="277" width="103.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="376.91" y="287.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (8,265,660 samples, 0.03%)</title><rect x="1157.4" y="389" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1160.42" y="399.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (4,761,608 samples, 0.02%)</title><rect x="1002.8" y="309" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1005.84" y="319.5" ></text>
</g>
<g >
<title>diskv::HashTable::IndexOf (7,188,104 samples, 0.02%)</title><rect x="213.1" y="389" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="216.07" y="399.5" ></text>
</g>
<g >
<title>[unknown] (2,502,781,259 samples, 7.91%)</title><rect x="270.9" y="197" width="93.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="273.90" y="207.5" >[unknown]</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_store_code (7,161,130 samples, 0.02%)</title><rect x="1038.8" y="325" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1041.79" y="335.5" ></text>
</g>
<g >
<title>__libc_read (2,653,901,074 samples, 8.39%)</title><rect x="69.8" y="373" width="99.0" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="72.83" y="383.5" >__libc_read</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (4,705,852 samples, 0.01%)</title><rect x="1011.6" y="325" width="0.2" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1014.58" y="335.5" ></text>
</g>
<g >
<title>[unknown] (302,628,679 samples, 0.96%)</title><rect x="229.3" y="341" width="11.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="232.34" y="351.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (12,740,585 samples, 0.04%)</title><rect x="1065.4" y="261" width="0.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1068.43" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6,055,888 samples, 0.02%)</title><rect x="1012.1" y="357" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1015.06" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::count (1,219,454,219 samples, 3.85%)</title><rect x="966.3" y="357" width="45.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="969.32" y="367.5" >std:..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;diskv::Page*&gt; &gt;::construct&lt;diskv::Page*, diskv::Page*&amp;&gt; (16,791,786 samples, 0.05%)</title><rect x="186.5" y="325" width="0.6" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="189.47" y="335.5" ></text>
</g>
<g >
<title>diskv::HashTableBucketPage::SetKeyAt (16,624,770 samples, 0.05%)</title><rect x="535.2" y="373" width="0.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="538.22" y="383.5" ></text>
</g>
<g >
<title>murmur3::rotl64 (13,410,976 samples, 0.04%)</title><rect x="520.9" y="229" width="0.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="523.86" y="239.5" ></text>
</g>
<g >
<title>[unknown] (4,787,441 samples, 0.02%)</title><rect x="1177.9" y="325" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1180.89" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (4,815,311 samples, 0.02%)</title><rect x="1090.2" y="389" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1093.22" y="399.5" ></text>
</g>
<g >
<title>__ieee754_pow_fma (14,582,139 samples, 0.05%)</title><rect x="216.8" y="373" width="0.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="219.75" y="383.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (4,438,672,817 samples, 14.03%)</title><rect x="761.7" y="325" width="165.6" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="764.72" y="335.5" >std::mersenne_twister..</text>
</g>
<g >
<title>diskv::GenericComparator&lt;32ul&gt;::operator (42,161,513 samples, 0.13%)</title><rect x="188.1" y="373" width="1.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="191.13" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::_M_check_len (5,564,590 samples, 0.02%)</title><rect x="534.0" y="229" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="536.98" y="239.5" ></text>
</g>
<g >
<title>[unknown] (9,540,054 samples, 0.03%)</title><rect x="1030.5" y="181" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1033.48" y="191.5" ></text>
</g>
<g >
<title>[unknown] (4,648,686 samples, 0.01%)</title><rect x="212.9" y="165" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="215.90" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;diskv::Page* const*, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt; (5,981,441 samples, 0.02%)</title><rect x="182.8" y="325" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="185.76" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (104,306,923 samples, 0.33%)</title><rect x="1046.5" y="325" width="3.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1049.54" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; (41,933,912 samples, 0.13%)</title><rect x="1066.6" y="293" width="1.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1069.65" y="303.5" ></text>
</g>
<g >
<title>_int_free (8,111,590 samples, 0.03%)</title><rect x="51.7" y="389" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="54.74" y="399.5" ></text>
</g>
<g >
<title>diskv::HashTable::Insert (8,778,966,175 samples, 27.75%)</title><rect x="213.3" y="389" width="327.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="216.34" y="399.5" >diskv::HashTable::Insert</text>
</g>
<g >
<title>[unknown] (5,975,616 samples, 0.02%)</title><rect x="12.7" y="341" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.71" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page**, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::operator- (12,004,552 samples, 0.04%)</title><rect x="187.4" y="309" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="190.36" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (214,430,345 samples, 0.68%)</title><rect x="168.8" y="373" width="8.0" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="171.81" y="383.5" ></text>
</g>
<g >
<title>diskv::Page::GetData (12,319,493 samples, 0.04%)</title><rect x="485.1" y="357" width="0.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="488.14" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (41,250,303 samples, 0.13%)</title><rect x="532.1" y="261" width="1.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="535.06" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::begin (9,568,417 samples, 0.03%)</title><rect x="183.0" y="325" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="185.98" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;::operator[] (1,108,239,499 samples, 3.50%)</title><rect x="1012.0" y="373" width="41.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1015.02" y="383.5" >std..</text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::back (41,259,499 samples, 0.13%)</title><rect x="490.8" y="325" width="1.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="493.84" y="335.5" ></text>
</g>
<g >
<title>[unknown] (5,811,151 samples, 0.02%)</title><rect x="1101.8" y="133" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.77" y="143.5" ></text>
</g>
<g >
<title>[unknown] (10,456,638 samples, 0.03%)</title><rect x="1101.6" y="245" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1104.60" y="255.5" ></text>
</g>
<g >
<title>murmur3::MurmurHash3_x64_128 (33,419,451 samples, 0.11%)</title><rect x="532.2" y="197" width="1.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="535.23" y="207.5" ></text>
</g>
<g >
<title>diskv::Page::GetData (8,952,013 samples, 0.03%)</title><rect x="538.9" y="373" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="541.90" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt;::_M_next (4,764,537 samples, 0.02%)</title><rect x="1003.0" y="341" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1006.02" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt;::back (34,627,560 samples, 0.11%)</title><rect x="481.7" y="341" width="1.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="484.68" y="351.5" ></text>
</g>
<g >
<title>[unknown] (53,497,060 samples, 0.17%)</title><rect x="10.6" y="389" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.62" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (534,671,169 samples, 1.69%)</title><rect x="1157.7" y="421" width="20.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1160.72" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (215,729,267 samples, 0.68%)</title><rect x="514.1" y="293" width="8.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="517.06" y="303.5" ></text>
</g>
<g >
<title>diskv_hashtable (31,636,839,810 samples, 100.00%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >diskv_hashtable</text>
</g>
<g >
<title>[unknown] (24,336,611 samples, 0.08%)</title><rect x="11.7" y="197" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.71" y="207.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt; (49,126,487 samples, 0.16%)</title><rect x="528.1" y="197" width="1.8" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="531.11" y="207.5" ></text>
</g>
<g >
<title>__libc_lseek64 (625,376,947 samples, 1.98%)</title><rect x="217.3" y="373" width="23.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="220.30" y="383.5" >_..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page* const*, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::__normal_iterator (7,218,113 samples, 0.02%)</title><rect x="182.2" y="325" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="185.18" y="335.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (48,741,008 samples, 0.15%)</title><rect x="1099.8" y="373" width="1.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1102.78" y="383.5" ></text>
</g>
<g >
<title>std::uninitialized_fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (11,544,380 samples, 0.04%)</title><rect x="212.6" y="309" width="0.5" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="215.64" y="319.5" ></text>
</g>
<g >
<title>[unknown] (447,952,395 samples, 1.42%)</title><rect x="461.0" y="165" width="16.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="463.98" y="175.5" ></text>
</g>
<g >
<title>[unknown] (2,660,535,170 samples, 8.41%)</title><rect x="378.5" y="261" width="99.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="381.45" y="271.5" >[unknown]</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (5,993,211 samples, 0.02%)</title><rect x="1047.7" y="277" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1050.71" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator[] (3,358,240 samples, 0.01%)</title><rect x="512.3" y="357" width="0.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="515.27" y="367.5" ></text>
</g>
<g >
<title>[unknown] (3,179,207,882 samples, 10.05%)</title><rect x="245.7" y="341" width="118.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="248.67" y="351.5" >[unknown]</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (563,607,116 samples, 1.78%)</title><rect x="1018.3" y="341" width="21.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1021.34" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::end (5,569,553 samples, 0.02%)</title><rect x="531.1" y="261" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="534.15" y="271.5" ></text>
</g>
<g >
<title>diskv::HashTableBucketPage::RemoveAndSave (612,049,430 samples, 1.93%)</title><rect x="512.4" y="373" width="22.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="515.40" y="383.5" >d..</text>
</g>
<g >
<title>_int_free (12,810,847 samples, 0.04%)</title><rect x="1100.4" y="309" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1103.39" y="319.5" ></text>
</g>
<g >
<title>[unknown] (2,883,718,090 samples, 9.12%)</title><rect x="370.1" y="325" width="107.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="373.13" y="335.5" >[unknown]</text>
</g>
<g >
<title>diskv::Page::ResetMemory (4,465,984 samples, 0.01%)</title><rect x="539.2" y="373" width="0.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="542.23" y="383.5" ></text>
</g>
<g >
<title>[unknown] (69,700,125 samples, 0.22%)</title><rect x="1071.3" y="293" width="2.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1074.33" y="303.5" ></text>
</g>
<g >
<title>[unknown] (220,062,410 samples, 0.70%)</title><rect x="469.5" y="149" width="8.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="472.48" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (84,560,601 samples, 0.27%)</title><rect x="1015.0" y="325" width="3.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1017.97" y="335.5" ></text>
</g>
<g >
<title>[unknown] (53,497,060 samples, 0.17%)</title><rect x="10.6" y="373" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.62" y="383.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (3,347,849 samples, 0.01%)</title><rect x="514.9" y="277" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="517.90" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page* const*, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::base (8,357,982 samples, 0.03%)</title><rect x="182.4" y="325" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="185.45" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (51,222,076 samples, 0.16%)</title><rect x="1064.3" y="293" width="1.9" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1067.30" y="303.5" ></text>
</g>
<g >
<title>[unknown] (66,748,044 samples, 0.21%)</title><rect x="1135.3" y="261" width="2.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1138.33" y="271.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (202,986,604 samples, 0.64%)</title><rect x="595.6" y="357" width="7.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="598.58" y="367.5" ></text>
</g>
<g >
<title>[unknown] (55,385,014 samples, 0.18%)</title><rect x="1071.9" y="213" width="2.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1074.86" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt;, std::allocator&lt;std::pair&lt;diskv::GenericKey&lt;32ul&gt;, diskv::GenericValue&lt;172ul&gt; &gt; &gt; &gt;::back (21,252,728 samples, 0.07%)</title><rect x="530.6" y="277" width="0.8" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="533.56" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (25,165,681 samples, 0.08%)</title><rect x="1040.6" y="325" width="0.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1043.57" y="335.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, true&gt; (9,554,327 samples, 0.03%)</title><rect x="571.6" y="357" width="0.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="574.57" y="367.5" ></text>
</g>
<g >
<title>diskv::HashTableDirectoryRegion::HashTableDirectoryRegion (11,544,380 samples, 0.04%)</title><rect x="212.6" y="373" width="0.5" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="215.64" y="383.5" ></text>
</g>
<g >
<title>[unknown] (3,435,346 samples, 0.01%)</title><rect x="364.1" y="53" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="367.12" y="63.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;diskv::Page* const*, std::vector&lt;diskv::Page*, std::allocator&lt;diskv::Page*&gt; &gt; &gt;::__normal_iterator (3,586,473 samples, 0.01%)</title><rect x="183.5" y="309" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="186.47" y="319.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (4,703,183 samples, 0.01%)</title><rect x="1050.5" y="325" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1053.52" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (15,518,783 samples, 0.05%)</title><rect x="1075.7" y="325" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1078.66" y="335.5" ></text>
</g>
<g >
<title>[unknown] (33,665,487 samples, 0.11%)</title><rect x="11.4" y="229" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.36" y="239.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple&lt;void, true&gt; (4,785,957 samples, 0.02%)</title><rect x="1053.2" y="357" width="0.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1056.18" y="367.5" ></text>
</g>
<g >
<title>diskv::HashTable::Insert (159,829,084 samples, 0.51%)</title><rect x="515.4" y="261" width="6.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="518.44" y="271.5" ></text>
</g>
<g >
<title>[unknown] (3,472,077 samples, 0.01%)</title><rect x="212.9" y="149" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="215.94" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, true&gt; &gt; &gt;::_M_node_allocator (3,538,906 samples, 0.01%)</title><rect x="1064.7" y="277" width="0.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1067.73" y="287.5" ></text>
</g>
<g >
<title>[unknown] (13,127,251 samples, 0.04%)</title><rect x="1030.3" y="213" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1033.34" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;::~pair (3,546,857 samples, 0.01%)</title><rect x="1068.1" y="261" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1071.08" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (7,237,761 samples, 0.02%)</title><rect x="1017.9" y="293" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1020.85" y="303.5" ></text>
</g>
<g >
<title>[unknown] (2,860,911,755 samples, 9.04%)</title><rect x="257.5" y="245" width="106.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="260.54" y="255.5" >[unknown]</text>
</g>
<g >
<title>main (28,696,013,829 samples, 90.70%)</title><rect x="31.7" y="405" width="1070.3" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="34.68" y="415.5" >main</text>
</g>
<g >
<title>[unknown] (6,781,982 samples, 0.02%)</title><rect x="364.0" y="133" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="367.00" y="143.5" ></text>
</g>
</g>
</svg>
